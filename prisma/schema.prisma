// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User model for storing user information
model User {
  id                String       @id
  name              String
  email             String       @unique
  referredBy        User?        @relation("ReferredBy", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referredById      String?
  referredUsers     User[]       @relation("ReferredBy")
  assignments       Assignment[]
  biddedAssignments Bid[]
  payments          Payment[]
  chats             Chat[]
  Message           Message[]

  @@index([referredById])
}

// Assignment model for storing assignment details
model Assignment {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  budget      Float
  deadline    DateTime
  postedBy    User      @relation(fields: [postedById], references: [id])
  bidders     Bid[]
  payments    Payment[]
  chats       Chat[]
  isLocked    Boolean   @default(true)
  postedById  String
  Message     Message[]

  @@index([postedById])
}

// Bid model for tracking bids made by users on assignments
model Bid {
  id           Int        @id @default(autoincrement())
  amount       Float
  bidder       User       @relation(fields: [bidderId], references: [id])
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  payment      Payment?   @relation(fields: [paymentId], references: [id])
  bidderId     String
  assignmentId Int
  paymentId    Int?

  @@index([bidderId])
  @@index([assignmentId])
  @@index([paymentId])
}

// Payment model for storing payment details
model Payment {
  id             Int        @id @default(autoincrement())
  amount         Float
  merchantAmount Float
  referrerAmount Float
  bidderAmount   Float
  referralCode   String?
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  payer          User       @relation(fields: [payerId], references: [id])
  paymentToken   String
  paid           Boolean    @default(false)
  Bid            Bid[]
  assignmentId   Int
  payerId        String

  @@index([assignmentId])
  @@index([payerId])
}

// Chat model for storing chat messages between users
model Chat {
  id           Int        @id @default(autoincrement())
  messages     Message[]
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  participants User[]
  assignmentId Int

  @@index([assignmentId])
}

// Message model for storing individual chat messages
model Message {
  id           Int         @id @default(autoincrement())
  text         String
  sender       User        @relation(fields: [senderId], references: [id])
  createdAt    DateTime    @default(now())
  chat         Chat        @relation(fields: [chatId], references: [id])
  chatId       Int
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  senderId     String

  @@index([senderId])
  @@index([chatId])
  @@index([assignmentId])
}
